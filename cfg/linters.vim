" Diagnotics params
let g:diag_ignore_first_call = 1 " 1 to start with the diagnotics OFF by default

" Mapping
nnoremap <silent><leader>lv :call ToggleDiagWrapper()<CR>
nnoremap <silent><Leader>ls :call Genstubs()<CR>
nnoremap <silent><leader>ll <cmd>TroubleToggle document_diagnostics<cr>
nnoremap <silent><leader>lL <cmd>TroubleToggle<cr>
nnoremap <silent><leader>lr <cmd>TroubleToggle lsp_references<cr>
nnoremap <silent><leader>ld <cmd>TroubleToggle lsp_definitions<cr>
nnoremap <silent><leader>lh <cmd>lua vim.lsp.buf.hover()<cr>

" Needed to generate the event InsertLeave with C-c
imap <C-c> <Esc>


let g:IsDiagsAllowed = 0
let g:mflova_diagnostics_status = 0
" Set up linters to its given filetype
augroup linters
    autocmd!
    " Launch the toggler but not in the exceptions
    au FileType python,cpp,markdown,yaml,vim,sh,cmake,rst,lua if expand('%:t') != 'TODO.md' && expand('%:t') != 'NOTES.md' | call ActivateDiag(1) | endif 
    au BufWritePost *.py,*.hpp,*.cpp,*.md,*.yaml,*.vim,*.bash,*.make,*.rst,*.lua,CMakeLists.txt  if expand('%:t') != 'TODO.md' && expand('%:t') != 'NOTES.md' | call ActivateDiag(1) | endif 
augroup end

augroup linters_exception_files
    silent autocmd! linters
    au VimEnter TODO.md,NOTES.md call ActivateDiag(0)
augroup end

lua << EOF
-- Python params
local python_max_line_length = 90
local python_indent_size = 4 -- spaces
local python_docstring_style = 'sphinx'
local python_good_names = 'q1, q2, q3, q4, q5, q, i, j, k, df, dt'
local python_flake8_ignore = 'S101, DAR402, F841, DU0116, S603, S607, DAR103'
local python_pylint_ignore = 'W0102, W0212, R0913, R0903, R0902, R0914, W0621, C0301, W0613, C0115, C0114, C0116, C0501, ' .. -- Overlapping or clashing with my format
                             'R6103, C0199, C0198, ' .. -- From extensions
                             'R0915' ..
                             --'W0612' .. -- unused variables: overlapping with other plugins
                             '' 

-- Yaml params
local yaml_max_line_length = 90

-- Cmake params
local cmake_max_line_length = 80
local cmake_indent_size = 4 -- spaces

-- C++ params
-- Generated by adding in the CMakeLists.txt set(CMAKE_EXPORT_COMPILE_COMMANDS ON).
-- This path is the dir (typically /build folder) where the output of this command
-- (compilationdatabase.json) is located
local cpp_compilation_database_dir = os.getenv('CPP_BUILD_DIR') 
local cpp_max_line_length = 90
local cpp_cpplint_ignore = '-whitespace/braces, -legal/copyright, -whitespace/newline'
local cpp_std_flag = 'c++17' -- c89, c99, c11, c++03, c++11, c++14, c++17, c++20. Empty means last std

require('lint').linters.flake8.args = {'--docstring-style', python_docstring_style, 
                                       '--max-line-length', python_max_line_length,
                                       '--ignore', python_flake8_ignore,
                                       '--indent-size', python_indent_size,
                                       '--format=%(path)s:%(row)d:%(col)d:%(code)s:%(text)s',
                                       '--no-show-source',
                                       '-',}

require('lint').linters.mypy.args = {'--strict',
                                     '--warn-unreachable',
                                     '--show-column-numbers',
                                     '--hide-error-codes',
                                     '--hide-error-context',
                                     '--no-color-output',
                                     '--no-error-summary',
                                     '--no-pretty',}

require('lint').linters.pylint.args = {'--good-names', python_good_names,
                                       '--disable', python_pylint_ignore,
                                       '--enable-all-extensions',
                                       '-f', 'json',}

require('lint').linters.yamllint.args = {'-d', '{extends: default, rules: {line-length:{max: ' .. yaml_max_line_length ..'}}}',
                                         '--format', 'parsable'}

require('lint').linters.markdownlint.args = {'--disable=MD013'} -- line-length

require('lint').linters.clangtidy.ignore_exitcode = true
require('lint').linters.clangtidy.args = {'--extra-arg=-Wall',
                                          '--extra-arg=-Weverything',
                                          '--extra-arg=-std=' .. cpp_std_flag,
                                          '--extra-arg=-Wdocumentation',
                                          '--extra-arg=-Wno-c++98-compat',
                                          '--extra-arg=-Wno-missing-prototypes',
                                          '--extra-arg=-Wno-old-style-cast', --cpplint provides much more info
                                          '-p=' .. cpp_compilation_database_dir,
                                          '--quiet'}

require('lint').linters.cpplint.args = {'--linelength=' .. cpp_max_line_length,
                                        '--filter', cpp_cpplint_ignore,
                                        '--root', '..', --assuming that vim will be opened from the repository root
                                        '--quiet'}

require('lint').linters.cppcheck.args = {'--enable=all',
                                         '-I include',
                                         '--language=c++',
                                         '--std=' .. cpp_std_flag,
                                         '--inline-suppr',
                                         '--quiet',
                                         '--cppcheck-build-dir=' .. cpp_compilation_database_dir,
                                         '--template={file}:{line}:{column}: [{id}] {severity}: {message}'}

require('lint').linters.codespell.args = {'--builtin=clear,rare,code'}

require('lint').linters.cmakelint.args = {'--linelength=' .. cmake_max_line_length,
                                          '--spaces=' .. cmake_indent_size,
                                          '--quiet'}

require('lint').linters.rstlint.args = {'--level=info'}

require('lint').linters_by_ft = {
  python = {'flake8', 'mypy', 'pylint', 'vulture', 'codespell', 'pytestcov'},
  cpp = {'cppcheck', 'clangtidy', 'cpplint', 'codespell'},
  rst = {'rstlint', 'rstcheck', 'proselint', 'codespell'},
  markdown = {'markdownlint', 'codespell', 'proselint'},
  yaml = {'yamllint', 'codespell', 'proselint'},
  cmake = {'cmakelint'},
  sh = {'shellcheck'},
  lua = {'luacheck'},
  vim = {'vint'},
}
EOF


" Generate stubs when the cursor is on the import/from
function! Genstubs()
    let l:line = getline('.')
    let l:words = split(l:line, '[ .]')
    let l:stubgen_args = 'stubgen -o $STUBSPATH '
    if l:words[0] == 'import'
"    Case1: Import XXX (as XXX) -m XXX 
        if l:words[2] == 'as'
            let l:stubgen_args = l:stubgen_args . '-m ' . l:words[1]
            echo 'Generating stubs for module ' . l:words[1]
"    Case2: Import XXX.XXX.XXX -p XXX (first)
        else
            let l:stubgen_args = l:stubgen_args . '-p ' . l:words[1]
            echo 'Generating stubs for package ' . l:words[1]
        endif
    endif
"    Case3: From XXX.XXX.XXX import XXX -p XXX (the first one)
    if l:words[0] == 'from'
        let l:stubgen_args = l:stubgen_args . '-p ' . l:words[1]
        echo 'Generating stubs for package ' . l:words[1]
    endif
    execute ':RunCMDSilent ' . l:stubgen_args
    echo 'Stubs generated'
endfunction

" Diags toggling

function! UpdateDiagnosticsStatus(diag_on)
    if a:diag_on == 1
        let g:mflova_diagnostics_status = 1
    else
        let g:mflova_diagnostics_status = 0
    endif
endfunction

" Changes the status bar when toggled bar
function! ToggleDiagWrapper()
    if g:diag_ignore_first_call == 1
        let g:diag_ignore_first_call = 0
        call ActivateDiag(1)
        call UpdateDiagnosticsStatus(1)
    else
        if g:mflova_diagnostics_status == 1
            call ActivateDiag(0)
        else
            call ActivateDiag(1)
        endif
    endif
endfunction

function! ActivateDiag(enable)
        if g:diag_ignore_first_call == 0
            if a:enable == 1
                lua vim.diagnostic.enable()
                execute "lua require('lint').try_lint()"
                silent autocmd linters
                call UpdateDiagnosticsStatus(1)
            else
                call UpdateDiagnosticsStatus(0)
                silent autocmd! linters
                lua vim.diagnostic.disable()
            endif
        endif
endfunction

" Startup
if g:diag_ignore_first_call == 1
    let g:mflova_diagnostics_status = 0
    augroup diags_start
        au VimEnter * call UpdateDiagnosticsStatus(0)
        au VimEnter * silent autocmd! linters
        au VimEnter * lua vim.diagnostic.disable()
    augroup end
else
    let g:mflova_diagnostics_status = 1
    augroup diags_start
        au VimEnter * execute "lua require('lint').try_lint()"
        au VimEnter * call UpdateDiagnosticsStatus(1)
        au VimEnter * silent autocmd linters
        au VimEnter * lua vim.diagnostic.enable()
    augroup end
endif

