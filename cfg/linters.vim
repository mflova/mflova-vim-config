" Diagnotics params
let g:diagnostics_enabled = 1
let g:mflova_diagnostics_on = ''
let g:mflova_diagnostics_off = 'DIAGS OFF'

" Mapping
"nnoremap <silent><leader>dt :call ToggleDiagWrapper()<CR>
nnoremap <silent><Leader>ds :call Genstubs()<CR>

" Needed to generate the event InsertLeave with C-c
imap <C-c> <Esc>

" Set up linters to its given filetype
augroup linters
    autocmd!
    au Filetype python,cpp,markdown,yaml,vim,sh,cmake,rst,lua execute "lua require('lint').try_lint()"
    au BufWritePost *.py,*.hpp,*.cpp,*.markdown,*.yaml,*.vim,*.bash,*.make,*.rst,*.lua,CMakeLists.txt execute "lua require('lint').try_lint()"
    " Exceptions
"    au BufEnter TODO.md,NOTES.md exe "echo 'lol'"
"    au BufEnter TODO.md exe "call DiagnosTemporaryDisable()"
"    au BufEnter NOTES.md exe "call DiagnosTemporaryDisable()"
"    au BufLeave TODO.md exe "call DiagnosRestoreStatus()"
"    au BufLeave NOTES.md exe "call DiagnosRestoreStatus()"
augroup end

lua << EOF
-- Python params
local python_max_line_length = 90
local python_indent_size = 4 -- spaces
local python_docstring_style = 'sphinx'
local python_good_names = 'q1, q2, q3, q4, q5, q, i, j, k, df, dt'
local python_pylint_ignore = 'W0102, W0212, R0913, R0903, R0902, R0914, W0621, C0301, C0115, C0116'

-- Yaml params
local yaml_max_line_length = 90

-- Cmake params
local cmake_max_line_length = 80
local cmake_indent_size = 4 -- spaces

-- C++ params
-- Generated by adding in the CMakeLists.txt set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
local cpp_compilation_database_dir = '/home/manuflya/flyability/build_gaston/build'
local cpp_max_line_length = 90
local cpp_cpplint_ignore = '-whitespace/braces, -legal/copyright, -whitespace/newline'
local cpp_std_flag = 'c++17' -- c89, c99, c11, c++03, c++11, c++14, c++17, c++20. Empty means last std

require('lint').linters.flake8.args = {'--docstring-style', python_docstring_style, 
                                       '--max-line-length', python_max_line_length,
                                       '--indent-size', python_indent_size,
                                       '--format=%(path)s:%(row)d:%(col)d:%(code)s:%(text)s',
                                       '--no-show-source',
                                       '-',}

require('lint').linters.mypy.args = {'--strict',
                                     '--show-column-numbers',
                                     '--hide-error-codes',
                                     '--hide-error-context',
                                     '--no-color-output',
                                     '--no-error-summary',
                                     '--no-pretty',}

require('lint').linters.pylint.args = {'--good-names', python_good_names,
                                       '--disable', python_pylint_ignore,
                                       '-f', 'json',}

require('lint').linters.yamllint.args = {'-d', '{extends: default, rules: {line-length:{max: ' .. yaml_max_line_length ..'}}}',
                                         '--format', 'parsable'}

require('lint').linters.markdownlint.args = {'--disable=MD013'} -- line-length

require('lint').linters.clangtidy.ignore_exitcode = true
require('lint').linters.clangtidy.args = {'--extra-arg=-Wall',
                                          '--extra-arg=-Weverything',
                                          '--extra-arg=-std=' .. cpp_std_flag,
                                          '--extra-arg=-Wdocumentation',
                                          '--extra-arg=-Wno-c++98-compat',
                                          '--extra-arg=-Wno-missing-prototypes',
                                          '--extra-arg=-Wno-old-style-cast', --cpplint provides much more info
                                          '-p=' .. cpp_compilation_database_dir,
                                          '--quiet'}

require('lint').linters.cpplint.args = {'--linelength=' .. cpp_max_line_length,
                                        '--filter', cpp_cpplint_ignore,
                                        '--root', '..', --assuming that vim will be opened from the repository root
                                        '--quiet'}

require('lint').linters.cppcheck.args = {'--enable=all',
                                         '-I include',
                                         '--language=c++',
                                         '--std=' .. cpp_std_flag,
                                         '--inline-suppr',
                                         '--quiet',
                                         '--cppcheck-build-dir=' .. cpp_compilation_database_dir,
                                         '--template={file}:{line}:{column}: [{id}] {severity}: {message}'}

require('lint').linters.codespell.args = {'--builtin=clear,rare,code'}

require('lint').linters.cmakelint.args = {'--linelength=' .. cmake_max_line_length,
                                          '--spaces=' .. cmake_indent_size,
                                          '--quiet'}

require('lint').linters.rstlint.args = {'--level=info'}

require('lint').linters_by_ft = {
  python = {'flake8', 'mypy', 'pylint', 'vulture', 'codespell'},
  yaml = {'yamllint', 'codespell', 'proselint'},
  markdown = {'markdownlint', 'codespell', 'proselint'},
  vim = {'vint'},
  sh = {'shellcheck'},
  lua = {'luacheck'},
  rst = {'codespell'},
  rst = {'rstlint', 'rstcheck', 'proselint', 'codespell'},
  cmake = {'cmakelint'},
  cpp = {'cppcheck', 'clangtidy', 'cpplint', 'codespell'},
}
-- To toggle the diags 
EOF


" Generate stubs when the cursor is on the import/from
function! Genstubs()
    let l:line = getline('.')
    let l:words = split(l:line, '[ .]')
    let l:stubgen_args = 'stubgen -o $MYPYPATH '
    if l:words[0] == 'import'
"    Case1: Import XXX (as XXX) -m XXX 
        if l:words[2] == 'as'
            let l:stubgen_args = l:stubgen_args . '-m ' . l:words[1]
"    Case2: Import XXX.XXX.XXX -p XXX (first)
        else
            let l:stubgen_args = l:stubgen_args . '-p ' . l:words[1]
        endif
    endif
"    Case3: From XXX.XXX.XXX import XXX -p XXX (the first one)
    if l:words[0] == 'from'
        let l:stubgen_args = l:stubgen_args . '-p ' . l:words[1]
    endif
    echo l:stubgen_args
    execute ':RunCMDSilent ' . l:stubgen_args
endfunction

" Init the status bar with the diagnos ON/OFF
if g:diagnostics_enabled
   let g:diagnos_status_bar = g:mflova_diagnostics_on
else
   let g:diagnos_status_bar = g:mflova_diagnostics_off
endif

" Changes the status bar when toggled bar
function! ToggleDiagWrapper()
    if g:diagnostics_enabled
        let g:diagnos_status_bar = g:mflova_diagnostics_off
        let g:diagnostics_enabled = 0
        autocmd! linters
    else
        let g:diagnos_status_bar = g:mflova_diagnostics_on
        let g:diagnostics_enabled = 1
    endif
    ToggleDiag
endfunction
let g:airline_section_warning = '%{g:diagnos_status_bar}'

" Save the status when entering in a special file
let g:mflova_diagnos_prev_status = g:diagnostics_enabled
function! DiagnosTemporaryDisable()
    let g:mflova_diagnos_prev_status = g:diagnostics_enabled
    let g:diagnos_status_bar = g:mflova_diagnostics_off
    ToggleDiagOff
endfunction

" Restore the saved status
function! DiagnosRestoreStatus()
    if g:mflova_diagnos_prev_status == 1
        let g:diagnos_status_bar = g:mflova_diagnostics_on
        ToggleDiagOn
    endif
endfunction
